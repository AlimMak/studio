// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview A question variation AI agent.
 *
 * - generateQuestionVariation - A function that handles the question variation process.
 * - GenerateQuestionVariationInput - The input type for the generateQuestionVariation function.
 * - GenerateQuestionVariationOutput - The return type for the generateQuestionVariation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateQuestionVariationInputSchema = z.object({
  question: z.string().describe('The original question to vary.'),
});
export type GenerateQuestionVariationInput = z.infer<
  typeof GenerateQuestionVariationInputSchema
>;

const GenerateQuestionVariationOutputSchema = z.object({
  variedQuestion: z
    .string()
    .describe('The varied question, rephrased while keeping the same meaning.'),
});
export type GenerateQuestionVariationOutput = z.infer<
  typeof GenerateQuestionVariationOutputSchema
>;

export async function generateQuestionVariation(
  input: GenerateQuestionVariationInput
): Promise<GenerateQuestionVariationOutput> {
  return generateQuestionVariationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateQuestionVariationPrompt',
  input: {schema: GenerateQuestionVariationInputSchema},
  output: {schema: GenerateQuestionVariationOutputSchema},
  prompt: `You are an expert question rephraser. Rephrase the given question while preserving the original meaning, using different vocabulary and phrasing.

Original Question: {{{question}}}

Varied Question:`,
});

const generateQuestionVariationFlow = ai.defineFlow(
  {
    name: 'generateQuestionVariationFlow',
    inputSchema: GenerateQuestionVariationInputSchema,
    outputSchema: GenerateQuestionVariationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
